import { Router } from "express";
import { requireAuth } from "../middleware/requireAuth";
import Order from "../models/Order";
import OrderTracking from "../models/OrderTracking";

const router = Router();

/**
 * ======================================================
 * ‚úÖ POST /api/order-tracking/:orderId
 * Carrier c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô v·∫≠n chuy·ªÉn
 * ======================================================
 */
router.post("/:orderId", requireAuth, async (req: any, res, next) => {
  try {
    const { status, note = "" } = req.body || {};
    const orderId = req.params.orderId;

    if (!status) {
      return res.status(400).json({ message: "Missing status" });
    }

    const order = await Order.findById(orderId);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }

    const userId = req.user._id || req.user.id;

    // ‚úÖ Ch·ªâ carrier c·ªßa ƒë∆°n ƒë√≥ ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t
    if (String(order.carrier_id) !== String(userId)) {
      return res.status(403).json({ message: "Forbidden" });
    }

    // ‚úÖ Ghi nh·∫≠n ti·∫øn ƒë·ªô m·ªõi
    const tracking = await OrderTracking.create({
      order_id: order._id,
      carrier_id: userId,
      status,
      note,
    });

    // Danh s√°ch c√°c tr·∫°ng th√°i ƒë∆∞·ª£c ph√©p ƒë·ªìng b·ªô v√†o Order ch√≠nh
    const SYNC_STATUS = [
      "ASSIGNED",
      "ACCEPTED",
      "CONFIRMED",
      "ON_THE_WAY",
      "ARRIVED",
      "DELIVERING",
      "DELIVERED",
      "COMPLETED",
      "INCIDENT",
      "PAUSED",
      "NOTE",
    ];

    // ‚úÖ N·∫øu thu·ªôc nh√≥m tr√™n ‚Üí c·∫≠p nh·∫≠t Order.status
    if (SYNC_STATUS.includes(status)) {
      order.status = status;
      order.auditLogs = order.auditLogs || [];
      order.auditLogs.push({
        at: new Date(),
        by: String(userId),
        action: `PROGRESS:${status}`,
        note,
      });
      await order.save();
    }

    // ======================================================
    // üîî Ph√°t event realtime qua Socket.IO cho c√°c b√™n li√™n quan
    // ======================================================
    if (req.io) {
      // 1Ô∏è‚É£ Ph√°t cho t·∫•t c·∫£ client ƒëang theo d√µi order (Customer / Seller)
      const orderRoom = `order:${orderId}`;
      req.io.to(orderRoom).emit("order:updated", {
        orderId,
        status,
        note,
        updatedAt: new Date(),
      });

      // 2Ô∏è‚É£ Ph√°t cho Seller (dashboard ƒëang m·ªü)
      const sellerRoom = `seller:${order.seller_id}`;
      req.io.to(sellerRoom).emit("order:updated", {
        orderId,
        status,
        note,
        updatedAt: new Date(),
      });

      // 3Ô∏è‚É£ (T√πy ch·ªçn m·ªü r·ªông) Ph√°t cho Carrier c·ªßa ƒë∆°n
      const carrierRoom = `carrier:${order.carrier_id}`;
      req.io.to(carrierRoom).emit("order:updated", {
        orderId,
        status,
        note,
        updatedAt: new Date(),
      });

      console.log(
        `üì° Emit order:updated ‚Üí ${orderRoom}, ${sellerRoom}, ${carrierRoom} [${status}]`
      );
    }

    // ‚úÖ Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return res.status(201).json({ success: true, tracking });
  } catch (err) {
    console.error("‚ùå Error saving tracking:", err);
    next(err);
  }
});

/**
 * ======================================================
 * ‚úÖ GET /api/order-tracking/:orderId
 * L·∫•y to√†n b·ªô l·ªãch s·ª≠ tracking cho 1 ƒë∆°n h√†ng (Carrier ho·∫∑c Seller)
 * ======================================================
 */
router.get("/:orderId", requireAuth, async (req: any, res, next) => {
  try {
    const orderId = req.params.orderId;

    const order = await Order.findById(orderId);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }

    const userId = req.user._id || req.user.id;

    // ‚úÖ Cho ph√©p c·∫£ Carrier v√† Seller xem tracking
    const isCarrier = String(order.carrier_id) === String(userId);
    const isSeller = String(order.seller_id) === String(userId);
    const isCustomer = String(order.customer_id) === String(userId); 
    if (!isCarrier && !isSeller && !isCustomer) {
      return res.status(403).json({ message: "Forbidden" });
    }

    // ‚úÖ L·∫•y danh s√°ch track theo th·ªùi gian gi·∫£m d·∫ßn
    const trackings = await OrderTracking.find({ order_id: orderId })
      .sort({ createdAt: -1 })
      .lean();

    return res.json({ trackings });
  } catch (err) {
    console.error("‚ùå Error fetching tracking:", err);
    next(err);
  }
});

export default router;
