"use client";

import { useState, useEffect, useRef } from "react";
import axios from "axios";
import mapboxgl from "mapbox-gl";
import MapboxGeocoder from "@mapbox/mapbox-gl-geocoder";
import "@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css";
import "mapbox-gl/dist/mapbox-gl.css";
import { useNavigate, Link, useLocation } from "react-router-dom";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { ArrowLeft, RotateCcw } from "lucide-react";

interface OrderFormProps {
  onAddressChange?: (pickup: string, delivery: string) => void;
  onEstimate?: (distance: string, duration: string, fee: number) => void;
}

const MAPBOX_TOKEN =
  import.meta.env.VITE_MAPBOX_TOKEN ||
  "pk.eyJ1IjoicXVhbmcxOTExIiwiYSI6ImNtZ3Bjc2hkNTI3N2Yybm9raGN5NTk2M2oifQ.mtyOW12zbuT7eweGm3qO9w";

mapboxgl.accessToken = MAPBOX_TOKEN;

export default function OrderForm({ onAddressChange, onEstimate }: Readonly<OrderFormProps>) {
  const [packages, setPackages] = useState<any[]>([]);
  const [selectedPackage, setSelectedPackage] = useState("");
  const [customFloor, setCustomFloor] = useState<number | null>(null);
  const [extraFees, setExtraFees] = useState<any[]>([]);
  const [form, setForm] = useState({
    pickup_address: "",
    pickup_detail: "",
    delivery_address: "",
    total_price: "",
    phone: "",
  });
  const [loading, setLoading] = useState(false);
  const [distanceText, setDistanceText] = useState("");
  const [durationText, setDurationText] = useState("");
  const user_id = localStorage.getItem("user_id");
  const navigate = useNavigate();
  const hasSavedOrder = !!localStorage.getItem("orderFormData");
  const pickupGeoRef = useRef<HTMLDivElement | null>(null);
  const deliveryGeoRef = useRef<HTMLDivElement | null>(null);
  const pickupGeocoderRef = useRef<any>(null);
  const deliveryGeocoderRef = useRef<any>(null);
  const location = useLocation();
  const storedOrderData = localStorage.getItem("orderFormData");
  const parsedStoredData = storedOrderData ? JSON.parse(storedOrderData) : {};

  const {
    scheduleType = parsedStoredData.scheduleType || "now",
    deliveryTime = parsedStoredData.deliveryTime || null,
    selectedPackage: passedPackage = parsedStoredData.selectedPackage || "",
    extraFees: passedExtraFees = parsedStoredData.extraFees || [],
    totalFinal: passedTotalFinal = parsedStoredData.totalFinal || "",
  } = location.state || parsedStoredData || {};

  // üß© Kh√¥i ph·ª•c d·ªØ li·ªáu t·∫°m khi load trang
  useEffect(() => {
    const savedForm = localStorage.getItem("orderFormData");
    if (!savedForm) return;

    const parsedForm = JSON.parse(savedForm);
    setForm(parsedForm);

    if (parsedForm.selectedPackage) setSelectedPackage(parsedForm.selectedPackage);
    if (parsedForm.extraFees) setExtraFees(parsedForm.extraFees);

    // üïí ƒê·∫£m b·∫£o Mapbox ƒë√£ kh·ªüi t·∫°o xong tr∆∞·ªõc khi setInput
    const waitForGeocoder = setInterval(() => {
      if (pickupGeocoderRef.current && deliveryGeocoderRef.current) {
        if (parsedForm.pickup_address)
          pickupGeocoderRef.current.setInput(parsedForm.pickup_address);
        if (parsedForm.delivery_address)
          deliveryGeocoderRef.current.setInput(parsedForm.delivery_address);
        clearInterval(waitForGeocoder); // d·ª´ng v√≤ng l·∫∑p
      }
    }, 300);

    // cleanup ƒë·ªÉ tr√°nh memory leak
    return () => clearInterval(waitForGeocoder);
  }, []);

  // üß© L∆∞u d·ªØ li·ªáu t·∫°m v√†o localStorage m·ªói khi thay ƒë·ªïi
  useEffect(() => {
    const northernProvinces = [
      "H√† N·ªôi", "B·∫Øc Ninh", "B·∫Øc Giang", "H·∫£i D∆∞∆°ng", "H·∫£i Ph√≤ng", "H∆∞ng Y√™n",
      "Vƒ©nh Ph√∫c", "Ph√∫ Th·ªç", "Th√°i Nguy√™n", "B·∫Øc K·∫°n", "Tuy√™n Quang", "Y√™n B√°i",
      "L√†o Cai", "L·∫°ng S∆°n", "Qu·∫£ng Ninh", "H√≤a B√¨nh", "S∆°n La", "ƒêi·ªán Bi√™n",
      "Lai Ch√¢u", "Cao B·∫±ng"
    ];

    const isPickupNorth = northernProvinces.some(p => form.pickup_address.includes(p));
    const isDeliveryNorth = northernProvinces.some(p => form.delivery_address.includes(p));

    // ‚úÖ Ch·ªâ l∆∞u n·∫øu c·∫£ hai ƒë·ªãa ch·ªâ ƒë·ªÅu n·∫±m trong mi·ªÅn B·∫Øc
    if (isPickupNorth && isDeliveryNorth) {
      const fullOrderData = {
        ...form,
        selectedPackage: selectedPackage || "",
        extraFees: extraFees || [],
        totalFinal: parseFloat(form.total_price || "0") +
          extraFees.reduce((sum, f) => sum + Number(f.price?.$numberDecimal || f.price), 0),
        scheduleType,
        deliveryTime,
      };

      localStorage.setItem("orderFormData", JSON.stringify(fullOrderData));
      console.log("‚úÖ ƒê√£ l∆∞u to√†n b·ªô th√¥ng tin g√≥i v√†o orderFormData:", fullOrderData);
    } else {
      console.warn("üö´ Kh√¥ng l∆∞u v√¨ ƒë·ªãa ch·ªâ n·∫±m ngo√†i ph·∫°m vi mi·ªÅn B·∫Øc Vi·ªát Nam!");
    }
  }, [form, selectedPackage, extraFees, scheduleType, deliveryTime]);

  // üß© Load l·∫°i khi quay v·ªÅ t·ª´ trang kh√°c (v·∫´n gi·ªØ d·ªØ li·ªáu c≈©)
  useEffect(() => {
    const data = location.state;
    if (!data) return;

    setForm((prev) => ({
      ...prev,
      pickup_address: data.pickup_address || prev.pickup_address,
      pickup_detail: data.pickup_detail || prev.pickup_detail,
      delivery_address: data.delivery_address || prev.delivery_address,
      phone: data.phone || prev.phone,
      total_price: data.totalFinal?.toString() || prev.total_price,
    }));

    if (data.selectedPackage) setSelectedPackage(data.selectedPackage);
    if (data.extraFees) setExtraFees(data.extraFees);
  }, [location.state]);

  useEffect(() => {
    const fetchPackages = async () => {
      const res = await axios.get("http://localhost:4000/api/pricing");
      setPackages(res.data?.packages || []);
    };
    fetchPackages();
  }, []);

  useEffect(() => {
    if (!pickupGeoRef.current || !deliveryGeoRef.current) return;

    const opts = { accessToken: MAPBOX_TOKEN, mapboxgl, marker: false, language: "vi", countries: "VN" };

    const pickupGeocoder = new MapboxGeocoder({ ...opts, placeholder: "Nh·∫≠p ƒë·ªãa ch·ªâ l·∫•y h√†ng..." });
    const deliveryGeocoder = new MapboxGeocoder({ ...opts, placeholder: "Nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng..." });

    pickupGeocoder.addTo(pickupGeoRef.current);
    deliveryGeocoder.addTo(deliveryGeoRef.current);
    pickupGeocoderRef.current = pickupGeocoder;
    deliveryGeocoderRef.current = deliveryGeocoder;
    pickupGeocoder.on("result", (e) => {
      const address = e.result?.place_name || "";

      setForm((prev) => {
        if (prev.delivery_address && prev.delivery_address.trim() === address.trim()) {
          alert(" ƒê·ªãa ch·ªâ l·∫•y h√†ng v√† giao h√†ng kh√¥ng ƒë∆∞·ª£c tr√πng nhau!");
          return prev; // kh√¥ng c·∫≠p nh·∫≠t
        }
        onAddressChange?.(address, prev.delivery_address);
        return { ...prev, pickup_address: address };
      });
    });

    deliveryGeocoder.on("result", (e) => {
      const address = e.result?.place_name || "";

      setForm((prev) => {
        if (prev.pickup_address && prev.pickup_address.trim() === address.trim()) {
          alert("ƒê·ªãa ch·ªâ giao h√†ng kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi ƒë·ªãa ch·ªâ l·∫•y h√†ng!");
          return prev; // kh√¥ng c·∫≠p nh·∫≠t
        }
        onAddressChange?.(prev.pickup_address, address);
        return { ...prev, delivery_address: address };
      });
    });

    return () => {
      pickupGeocoder.onRemove();
      deliveryGeocoder.onRemove();
    };
  }, []);

  const validPrefixes = ["03", "05", "07", "08", "09", "012", "016", "018", "019"];

  const formatPhone = (phone: string) => {
    const cleaned = phone.replace(/\D/g, "").slice(0, 10);
    if (cleaned.length <= 3) return cleaned;
    if (cleaned.length <= 6) return `${cleaned.slice(0, 3)} ${cleaned.slice(3)}`;
    return `${cleaned.slice(0, 3)} ${cleaned.slice(3, 6)} ${cleaned.slice(6)}`;
  };

  const handlePhoneChange = (value: string) => {
    const cleaned = value.replace(/\D/g, "");
    setForm((prev) => ({ ...prev, phone: cleaned }));
  };

  const handleEstimatePrice = async () => {
    if (!form.pickup_address || !form.delivery_address || !selectedPackage) return;
    if (form.pickup_address.trim() === form.delivery_address.trim()) {
      alert("ƒê·ªãa ch·ªâ l·∫•y h√†ng v√† giao h√†ng kh√¥ng ƒë∆∞·ª£c tr√πng nhau.");
      return;
    }
    const res = await axios.post("http://localhost:4000/api/pricing/estimate2", {
      pickup_address: form.pickup_address,
      delivery_address: form.delivery_address,
      pricepackage_id: selectedPackage,
      max_floor: customFloor || undefined,
    });

    if (!res.data?.success) return;
    setForm((prev) => ({ ...prev, total_price: String(res.data.data.totalFee) }));
    setDistanceText(res.data.data.distance.text);
    setDurationText(res.data.data.duration.text);
    onEstimate?.(res.data.data.distance.text, res.data.data.duration.text, res.data.data.totalFee);
  };

  useEffect(() => {
    if (form.pickup_address && form.delivery_address && selectedPackage) handleEstimatePrice();
  }, [form.pickup_address, form.delivery_address, selectedPackage, customFloor]);

  const totalExtra = extraFees.reduce((sum, f) => sum + Number(f.price?.$numberDecimal || f.price), 0);
  const totalFinal = parseFloat(form.total_price || "0") + totalExtra;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (form.pickup_address.trim() === form.delivery_address.trim()) {
      alert("ƒê·ªãa ch·ªâ l·∫•y h√†ng v√† giao h√†ng kh√¥ng ƒë∆∞·ª£c tr√πng nhau.");
      return;
    }

    const phone = form.phone;
    if (phone.length !== 10) {
      alert("S·ªë ƒëi·ªán tho·∫°i ph·∫£i g·ªìm ƒë√∫ng 10 s·ªë!");
      return;
    }

    const prefix2 = phone.slice(0, 2);
    const prefix3 = phone.slice(0, 3);
    if (!validPrefixes.includes(prefix2) && !validPrefixes.includes(prefix3)) {
      alert("ƒê·∫ßu s·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!");
      return;
    }

    setLoading(true);
    const token = localStorage.getItem("auth_token");

    try {
      const res = await axios.post(
        "http://localhost:4000/api/orders",
        {
          customer_id: user_id,
          pickup_address: form.pickup_address,
          pickup_detail: form.pickup_detail,
          delivery_address: form.delivery_address,
          total_price: passedTotalFinal || totalFinal,
          package_id: selectedPackage || passedPackage,
          phone: form.phone,
          scheduleType,
          scheduled_time: deliveryTime || null, // ‚úÖ G·ª≠i l·ªãch giao h√†ng
          extra_fees: extraFees.length > 0 ? extraFees.map((f) => f._id) : (passedExtraFees.map((f) => f._id) || []),
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      if (res.data?.success) {
        // ‚úÖ X√≥a d·ªØ li·ªáu t·∫°m
        localStorage.removeItem("orderFormData");
        localStorage.removeItem("selectedPackage");
        localStorage.removeItem("extraFees");

        alert("üéâ ƒê·∫∑t h√†ng th√†nh c√¥ng! C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•.");
        navigate("/"); // üîÅ Quay l·∫°i trang ch·ªß
      }
    } catch (err) {
      console.error(err);
      alert(" ƒê·∫∑t h√†ng th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
      setLoading(false);
    }
  };

  // üß© H√†m reset form
  const handleReset = () => {
    if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô d·ªØ li·ªáu ƒë√£ nh·∫≠p kh√¥ng?")) {
      // üßπ X√≥a d·ªØ li·ªáu trong localStorage
      localStorage.removeItem("orderFormData");
      localStorage.removeItem("selectedPackage");
      localStorage.removeItem("extraFees");

      // üßπ Reset to√†n b·ªô form v√† state
      setForm({
        pickup_address: "",
        pickup_detail: "",
        delivery_address: "",
        total_price: "",
        phone: "",
      });
      setSelectedPackage("");
      setExtraFees([]);

      // üßπ X√≥a input mapbox
      if (pickupGeocoderRef.current) pickupGeocoderRef.current.setInput("");
      if (deliveryGeocoderRef.current) deliveryGeocoderRef.current.setInput("");

      // üöÄ ƒêi·ªÅu h∆∞·ªõng l·∫°i trang hi·ªán t·∫°i v√† x√≥a state c·ªßa React Router
      navigate("/dat-hang", { replace: true, state: {} });

      alert("‚úÖ ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu t·∫°m v√† th√¥ng tin g√≥i d·ªãch v·ª•.");
    }
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <Link
          to="/"
          className="flex items-center gap-2 text-sm font-semibold text-gray-600 hover:text-orange-500 transition-colors"
        >
          <ArrowLeft className="w-4 h-4" />
          V·ªÅ trang ch·ªß
        </Link>

        {/* üß© N√∫t reset d·ªØ li·ªáu */}
        <button
          onClick={handleReset}
          className="flex items-center gap-2 text-sm text-red-500 hover:text-red-600 transition-colors"
        >
          <RotateCcw className="w-4 h-4" />
          Nh·∫≠p l·∫°i t·ª´ ƒë·∫ßu
        </button>
      </div>

      <h2 className="text-2xl font-bold text-orange-500 mb-6 text-center"> ƒê·∫∑t giao h√†ng</h2>
      {/* Th√¥ng tin g√≥i & l·ªãch giao h√†ng */}
      <div className="mb-6 border border-gray-200 rounded-lg bg-gray-50 p-4 shadow-sm space-y-3">
        <h3 className="font-bold text-gray-800 text-lg"> Th√¥ng tin g√≥i d·ªãch v·ª•</h3>
        <Button
          variant="outline"
          disabled={!hasSavedOrder}
          className={`mt-4 w-full border-orange-400 ${hasSavedOrder
            ? "text-orange-600 hover:bg-orange-50"
            : "text-gray-400 border-gray-300 cursor-not-allowed"
            }`}
          onClick={() => {
            if (!hasSavedOrder) {
              alert("‚ö†Ô∏è B·∫°n ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ ch·ªânh s·ª≠a. Vui l√≤ng xem gi√° tr∆∞·ªõc khi ch·ªânh s·ª≠a!");
              return;
            }

            navigate("/estimate-price", {
              state: {
                pickup_address: form.pickup_address,
                delivery_address: form.delivery_address,
                pickup_detail: form.pickup_detail,
                phone: form.phone,
              },
            });
          }}
        >
          Ch·ªânh s·ª≠a g√≥i d·ªãch v·ª• / ph·ª• ph√≠
        </Button>
        {passedPackage ? (
          <>
            {(() => {
              const foundPackage = packages.find(pkg => pkg._id === (selectedPackage || passedPackage));
              return (
                <p>
                  <strong>G√≥i d·ªãch v·ª•:</strong>{" "}
                  {foundPackage ? foundPackage.name : "Kh√¥ng x√°c ƒë·ªãnh"}
                </p>
              );
            })()}
            <p><strong>T·ªïng ti·ªÅn:</strong> {Number(passedTotalFinal).toLocaleString("vi-VN")}‚Ç´</p>
            {passedExtraFees.length > 0 && (
              <div className="mt-2">
                <p className="font-semibold text-gray-700">Ph·ª• ph√≠ ƒëi k√®m:</p>
                <ul className="list-disc pl-5 text-sm text-gray-600">
                  {passedExtraFees.map((fee, idx) => (
                    <li key={idx}>
                      {fee.name}: +{Number(fee.price?.$numberDecimal || fee.price).toLocaleString("vi-VN")}‚Ç´
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </>
        ) : (
          <p className="text-gray-500"></p>
        )}

        <hr className="my-3" />

        <h3 className="font-bold text-gray-800 text-lg">L·ªãch giao h√†ng</h3>
        {scheduleType === "now" ? (
          <p>
            Giao ngay - d·ª± ki·∫øn{" "}
            <strong>
              {new Date(Date.now() + 2 * 60 * 60 * 1000).toLocaleString("vi-VN", {
                dateStyle: "short",
                timeStyle: "short",
              })}
            </strong>
          </p>
        ) : deliveryTime ? (
          <p>
            Giao v√†o l√∫c{" "}
            <strong>
              {new Date(deliveryTime).toLocaleString("vi-VN", {
                dateStyle: "short",
                timeStyle: "short",
              })}
            </strong>
          </p>
        ) : (
          <p className="text-gray-500">Ch∆∞a ch·ªçn l·ªãch giao h√†ng.</p>
        )}

      </div>
      <form onSubmit={handleSubmit} className="space-y-5 flex flex-col flex-1">
        <div>
          <Label>ƒê·ªãa ch·ªâ l·∫•y h√†ng</Label>
          <div ref={pickupGeoRef} className="mt-2 w-full mapbox-container relative z-20"></div>
          <input
            type="text"
            placeholder="Nh·∫≠p chi ti·∫øt (S·ªë nh√†, t·∫ßng, t√≤a nh√†...)"
            className="mt-2 w-full border border-gray-300 rounded-lg p-2"
            value={form.pickup_detail}
            onChange={(e) => setForm((prev) => ({ ...prev, pickup_detail: e.target.value }))}
          />
        </div>

        <div>
          <Label>ƒê·ªãa ch·ªâ giao h√†ng</Label>
          <div ref={deliveryGeoRef} className="mt-2 w-full mapbox-container relative z-10"></div>
        </div>

        <input
          type="tel"
          maxLength={12}
          className="border border-gray-300 rounded-lg p-2 w-full"
          placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i..."
          value={formatPhone(form.phone)}
          onChange={(e) => handlePhoneChange(e.target.value)}
          required
        />

        <Button
          type="button"
          className="w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 rounded-lg shadow-lg"
          onClick={() => {
            // ‚öôÔ∏è Ki·ªÉm tra ƒë·ªãa ch·ªâ
            if (!form.pickup_address || !form.delivery_address) {
              const defaultVehicleId = "68e23b3c43b598cadadcc79a";
              navigate(`/vehicles/${defaultVehicleId}/price`);
              return;
            }
            const northernProvinces = [
              "H√† N·ªôi", "B·∫Øc Ninh", "B·∫Øc Giang", "H·∫£i D∆∞∆°ng", "H·∫£i Ph√≤ng", "H∆∞ng Y√™n",
              "Vƒ©nh Ph√∫c", "Ph√∫ Th·ªç", "Th√°i Nguy√™n", "B·∫Øc K·∫°n", "Tuy√™n Quang", "Y√™n B√°i",
              "L√†o Cai", "L·∫°ng S∆°n", "Qu·∫£ng Ninh", "H√≤a B√¨nh", "S∆°n La", "ƒêi·ªán Bi√™n",
              "Lai Ch√¢u", "Cao B·∫±ng"
            ];

            const isPickupNorth = northernProvinces.some(p =>
              form.pickup_address.includes(p)
            );
            const isDeliveryNorth = northernProvinces.some(p =>
              form.delivery_address.includes(p)
            );

            if (!isPickupNorth || !isDeliveryNorth) {
              alert("‚ö†Ô∏è ƒê·ªãa ch·ªâ l·∫•y h√†ng ho·∫∑c giao h√†ng n·∫±m ngo√†i ph·∫°m vi mi·ªÅn B·∫Øc Vi·ªát Nam. Vui l√≤ng ch·ªçn l·∫°i!");
              return;
            }

            // ‚öôÔ∏è Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i
            if (!form.phone.trim()) {
              alert("Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i tr∆∞·ªõc khi xem gi√°.");
              return;
            }

            if (form.phone.length !== 10) {
              alert("S·ªë ƒëi·ªán tho·∫°i ph·∫£i g·ªìm ƒë√∫ng 10 s·ªë.");
              return;
            }

            const validPrefixes = ["03", "05", "07", "08", "09", "012", "016", "018", "019"];
            const prefix2 = form.phone.slice(0, 2);
            const prefix3 = form.phone.slice(0, 3);
            if (!validPrefixes.includes(prefix2) && !validPrefixes.includes(prefix3)) {
              alert("ƒê·∫ßu s·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!");
              return;
            }

            // ‚öôÔ∏è N·∫øu h·ª£p l·ªá -> chuy·ªÉn sang trang xem gi√°
            navigate("/estimate-price", {
              state: {
                pickup_address: form.pickup_address,
                delivery_address: form.delivery_address,
                pickup_detail: form.pickup_detail,
                phone: form.phone,
              },
            });
          }}
        >
          Xem gi√°
        </Button>

        <Button
          type="submit"
          className={`w-full ${form.total_price ? "bg-orange-500 hover:bg-orange-600" : "bg-gray-400 cursor-not-allowed"
            } text-white font-semibold py-2 rounded-lg shadow-lg`}
          disabled={!form.total_price || loading}
        >
          {loading ? "ƒêang x·ª≠ l√Ω..." : "X√°c nh·∫≠n ƒë∆°n h√†ng "}
        </Button>
      </form>
    </div>
  );
}
