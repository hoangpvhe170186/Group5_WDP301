"use client";

import { useState } from "react";
import axios from "axios";
import { useLocation, useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function OrderPreviewPage() {
  const [items, setItems] = useState([
    {
      description: "",
      quantity: 1,
      weight: 0,
      fragile: false,
      type: [],
      shipping_instructions: [],
      driver_note: "",
    },
  ]);
  const [loading, setLoading] = useState(false);
  const [scheduleType, setScheduleType] = useState<"now" | "later">("now"); // ‚úÖ Th·ªùi gian: B√¢y gi·ªù / ƒê·∫∑t l·ªãch
  const [scheduledDate, setScheduledDate] = useState<string>(""); // ‚úÖ Ng√†y ƒë·∫∑t
  const [scheduledTime, setScheduledTime] = useState<string>(""); // ‚úÖ Gi·ªù ƒë·∫∑t

  const navigate = useNavigate();
  const location = useLocation();
  const params = new URLSearchParams(location.search);
  const orderId = params.get("orderId");

  const handleChange = (index: number, field: string, value: any) => {
    const updated = [...items];
    updated[index][field] = value;
    setItems(updated);
  };

  const toggleType = (index: number, type: string) => {
    const updated = [...items];
    const types = updated[index].type;
    updated[index].type = types.includes(type)
      ? types.filter((t: string) => t !== type)
      : [...types, type];
    setItems(updated);
  };

  const toggleShippingInstruction = (index: number, instruction: string) => {
    const updated = [...items];
    const current = updated[index].shipping_instructions || [];
    updated[index].shipping_instructions = current.includes(instruction)
      ? current.filter((i: string) => i !== instruction)
      : [...current, instruction];
    setItems(updated);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const token = localStorage.getItem("auth_token");
      if (!token) return alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p!");

      // üïí Chu·∫©n h√≥a th·ªùi gian giao h√†ng
      let deliveryTime: string | null = null;
      if (scheduleType === "later") {
        if (!scheduledDate || !scheduledTime)
          return alert("Vui l√≤ng ch·ªçn ng√†y v√† gi·ªù giao h√†ng!");
        deliveryTime = new Date(`${scheduledDate}T${scheduledTime}`).toISOString();
      }

      const res = await axios.post(
        "http://localhost:4000/api/orders/items",
        {
          order_id: orderId,
          items,
          delivery_schedule: {
            type: scheduleType,
            datetime: deliveryTime || new Date().toISOString(),
          },
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      if (res.data?.success) {
        alert("üéâ X√°c nh·∫≠n ƒë∆°n h√†ng th√†nh c√¥ng!");
        navigate("/");
      }
    } catch (err: any) {
      alert(err.response?.data?.message || "L·ªói khi g·ª≠i chi ti·∫øt h√†ng h√≥a!");
    } finally {
      setLoading(false);
    }
  };

  const itemTypes = [
    "Th·ª±c ph·∫©m & ƒê·ªì u·ªëng",
    "VƒÉn ph√≤ng ph·∫©m",
    "Qu·∫ßn √°o & Ph·ª• ki·ªán",
    "ƒê·ªì ƒëi·ªán t·ª≠",
    "Nguy√™n v·∫≠t li·ªáu / Linh ki·ªán",
    "ƒê·ªì gia d·ª•ng / N·ªôi th·∫•t",
    "Kh√°c",
  ];

  const shippingOptions = [
    "H√†ng d·ªÖ v·ª°",
    "Gi·ªØ kh√¥ r√°o",
    "C·∫ßn nhi·ªát ƒë·ªô th√≠ch h·ª£p",
    "Th·ª±c ph·∫©m c√≥ m√πi",
  ];

  return (
    <Card className="w-full max-w-3xl mx-auto shadow-lg mt-10 border border-gray-200">
      <CardHeader className="bg-gradient-to-r from-orange-500 to-red-500 text-white p-5 flex justify-between items-center">
        <CardTitle className="text-2xl font-bold text-center flex-1">
          üì¶ Chi ti·∫øt h√†ng h√≥a
        </CardTitle>
        <Button
          type="button"
          onClick={() => navigate("/dat-hang")}
          className="bg-white text-orange-600 hover:bg-orange-100 font-semibold px-4 py-2 rounded-lg"
        >
          ‚¨Ö Quay l·∫°i
        </Button>
      </CardHeader>

      <CardContent className="p-6">
        <form onSubmit={handleSubmit}>
          {/* üïí L·ªãch giao h√†ng */}
          <div className="border border-gray-200 rounded-lg p-4 mb-6 bg-gray-50 shadow-sm">
            <Label className="font-semibold text-gray-700 mb-2 block">
              üïí Th·ªùi gian giao h√†ng
            </Label>

            <div className="flex flex-col md:flex-row items-center gap-4">
              <select
                value={scheduleType}
                onChange={(e) =>
                  setScheduleType(e.target.value as "now" | "later")
                }
                className="border border-gray-300 rounded-lg p-2 w-full md:w-1/2"
              >
                <option value="now">B√¢y gi·ªù</option>
                <option value="later">ƒê·∫∑t l·ªãch</option>
              </select>        
            </div>

            {/* Khi ch·ªçn ƒê·∫∑t l·ªãch th√¨ hi·ªán l·ªãch + gi·ªù */}
            {scheduleType === "later" && (
              <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label className="font-semibold text-gray-700">üìÖ Ng√†y giao</Label>
                  <input
                    type="date"
                    min={new Date().toISOString().split("T")[0]}
                    className="border border-gray-300 rounded-lg p-2 w-full mt-1"
                    value={scheduledDate}
                    onChange={(e) => setScheduledDate(e.target.value)}
                  />
                </div>
                <div>
                  <Label className="font-semibold text-gray-700">‚è∞ Gi·ªù giao</Label>
                  <input
                    type="time"
                    className="border border-gray-300 rounded-lg p-2 w-full mt-1"
                    value={scheduledTime}
                    onChange={(e) => setScheduledTime(e.target.value)}
                  />
                </div>
              </div>
            )}
          </div>

          {/* DANH S√ÅCH H√ÄNG H√ìA */}
          {items.map((item, index) => (
            <div key={index} className="border rounded-lg p-5 space-y-4 bg-gray-50 mb-6 shadow-sm">
              <div>
                <Label className="font-semibold">M√¥ t·∫£ h√†ng h√≥a</Label>
                <input
                  type="text"
                  className="w-full border rounded-md p-2"
                  placeholder="V√≠ d·ª•: T·ªß l·∫°nh, Gh·∫ø sofa..."
                  value={item.description}
                  onChange={(e) => handleChange(index, "description", e.target.value)}
                  required
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label className="font-semibold">S·ªë l∆∞·ª£ng</Label>
                  <input
                    type="number"
                    min="1"
                    className="w-full border rounded-md p-2"
                    value={item.quantity}
                    onChange={(e) => handleChange(index, "quantity", parseInt(e.target.value))}
                  />
                </div>
                <div>
                  <Label className="font-semibold">Tr·ªçng l∆∞·ª£ng (kg)</Label>
                  <input
                    type="number"
                    step="0.1"
                    min="0"
                    className="w-full border rounded-md p-2"
                    value={item.weight}
                    onChange={(e) => handleChange(index, "weight", parseFloat(e.target.value))}
                  />
                </div>
              </div>

              {/* Lo·∫°i h√†ng */}
              <div>
                <Label className="font-semibold">Lo·∫°i h√†ng v·∫≠n chuy·ªÉn</Label>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-2 mt-2">
                  {itemTypes.map((type) => (
                    <label
                      key={type}
                      className={`flex items-center gap-2 border rounded-md p-2 cursor-pointer text-sm transition-all ${
                        item.type.includes(type)
                          ? "border-orange-500 bg-orange-50"
                          : "border-gray-300 hover:border-orange-300"
                      }`}
                    >
                      <input
                        type="checkbox"
                        checked={item.type.includes(type)}
                        onChange={() => toggleType(index, type)}
                      />
                      {type}
                    </label>
                  ))}
                </div>
              </div>

              {/* H∆∞·ªõng d·∫´n v·∫≠n chuy·ªÉn */}
              <div>
                <Label className="font-semibold">H∆∞·ªõng d·∫´n v·∫≠n chuy·ªÉn</Label>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-2 mt-2">
                  {shippingOptions.map((option) => (
                    <label
                      key={option}
                      className={`flex items-center gap-2 border rounded-md p-2 cursor-pointer text-sm transition-all ${
                        item.shipping_instructions.includes(option)
                          ? "border-orange-500 bg-orange-50"
                          : "border-gray-300 hover:border-orange-300"
                      }`}
                    >
                      <input
                        type="checkbox"
                        checked={item.shipping_instructions.includes(option)}
                        onChange={() => toggleShippingInstruction(index, option)}
                      />
                      {option}
                    </label>
                  ))}
                </div>
              </div>

              {/* Ghi ch√∫ */}
              <div>
                <Label className="font-semibold">Ghi ch√∫ cho t√†i x·∫ø</Label>
                <textarea
                  className="w-full border rounded-md p-2 mt-1"
                  placeholder="V√≠ d·ª•: Giao nh·∫π tay, tr√°nh nghi√™ng..."
                  value={item.driver_note}
                  onChange={(e) => handleChange(index, "driver_note", e.target.value)}
                  maxLength={200}
                />
                <p className="text-xs text-gray-400 text-right">
                  {200 - item.driver_note.length} k√Ω t·ª± c√≤n l·∫°i
                </p>
              </div>
            </div>
          ))}

          {/* N√∫t X√°c nh·∫≠n */}
          <div className="flex justify-end mt-6">
            <Button
              type="submit"
              disabled={loading}
              className="bg-green-600 text-white font-semibold"
            >
              {loading ? "ƒêang g·ª≠i..." : "‚úÖ X√°c nh·∫≠n ƒë∆°n h√†ng"}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}
