"use client";
import React, { useState } from "react";
import axios from "axios";
import { Package, Eye, CheckSquare, X } from "lucide-react";
import EditPackageModal from "./EditPackageModal";
// Component Modal Th√™m chi ti·∫øt s·∫£n ph·∫©m
const OrderItemModal = ({ isOpen, onClose, order, onSuccess }) => {
  const [items, setItems] = useState([
    {
      description: "",
      quantity: 1,
      weight: 0,
      fragile: false,
      type: [],
      shipping_instructions: [],
      driver_note: "",
    },
  ]);

  const [loading, setLoading] = useState(false);
  const [step, setStep] = useState("input"); // "input" | "confirmation"
  const [isEditPackageOpen, setIsEditPackageOpen] = useState(false);
  const itemTypes = [
    "Th·ª±c ph·∫©m & ƒê·ªì u·ªëng",
    "VƒÉn ph√≤ng ph·∫©m",
    "Qu·∫ßn √°o & Ph·ª• ki·ªán",
    "ƒê·ªì ƒëi·ªán t·ª≠",
    "Nguy√™n v·∫≠t li·ªáu / Linh ki·ªán",
    "ƒê·ªì gia d·ª•ng / N·ªôi th·∫•t",
    "Kh√°c",
  ];

  const shippingOptions = [
    "H√†ng d·ªÖ v·ª°",
    "Gi·ªØ kh√¥ r√°o",
    "C·∫ßn nhi·ªát ƒë·ªô th√≠ch h·ª£p",
    "Th·ª±c ph·∫©m c√≥ m√πi",
  ];

  const handleAddItem = () => {
    setItems([
      ...items,
      {
        description: "",
        quantity: 1,
        weight: 0,
        fragile: false,
        type: [],
        shipping_instructions: [],
        driver_note: "",
      },
    ]);
  };

  const handleDeleteItem = (index) => {
    if (items.length === 1) {
      return alert("Ph·∫£i c√≥ √≠t nh·∫•t 1 h√†ng h√≥a");
    }
    setItems(items.filter((_, i) => i !== index));
  };

  const handleChange = (index, field, value) => {
    const updated = [...items];
    updated[index][field] = value;
    setItems(updated);
  };

  const toggleType = (index, type) => {
    const updated = [...items];
    const types = updated[index].type;
    updated[index].type = types.includes(type)
      ? types.filter((t) => t !== type)
      : [...types, type];
    setItems(updated);
  };

  const toggleShippingInstruction = (index, instruction) => {
    const updated = [...items];
    const current = updated[index].shipping_instructions;
    updated[index].shipping_instructions = current.includes(instruction)
      ? current.filter((i) => i !== instruction)
      : [...current, instruction];
    setItems(updated);
  };

  const handlePreview = () => {
    // Ki·ªÉm tra d·ªØ li·ªáu b·∫Øt bu·ªôc
    for (let i = 0; i < items.length; i++) {
      if (!items[i].description.trim()) {
        alert(`Vui l√≤ng nh·∫≠p m√¥ t·∫£ cho h√†ng h√≥a th·ª© ${i + 1}`);
        return;
      }
    }
    setStep("confirmation");
  };

  const handleBackToEdit = () => {
    setStep("input");
  };

  const handleSubmit = async () => {
    setLoading(true);

    try {
      const token = localStorage.getItem("auth_token");
      if (!token) {
        alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p!");
        return;
      }

      const res = await axios.post(
        "http://localhost:4000/api/orders/items",
        {
          order_id: order._id,
          items,
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      if (!res.data?.success) {
        alert(res.data?.message || "C√≥ l·ªói x·∫£y ra!");
        return;
      }

      alert("‚úÖ ƒê√£ th√™m chi ti·∫øt s·∫£n ph·∫©m th√†nh c√¥ng!");
      onSuccess();
    }catch (err) {
        console.error("‚ùå L·ªói khi th√™m s·∫£n ph·∫©m:", err);
        const message =
          err.response?.data?.message ||
          err.message ||
          "L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ server!";

        // ‚ö†Ô∏è N·∫øu l·ªói do v∆∞·ª£t gi·ªõi h·∫°n tr·ªçng l∆∞·ª£ng
        if (message.includes("v∆∞·ª£t qu√° gi·ªõi h·∫°n")) {
          if (confirm(`${message}\n\nB·∫°n c√≥ mu·ªën ƒë·ªïi sang g√≥i kh√°c kh√¥ng?`)) {
            setIsEditPackageOpen(true); // m·ªü modal ƒë·ªïi g√≥i
          }
        } else {
          alert("‚ö† " + message);
        }
      } finally {
        setLoading(false);
      }
    };

    if (!isOpen) return null;

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-lg w-full max-w-6xl max-h-[90vh] overflow-y-auto">
          <div className="bg-gradient-to-r from-orange-500 to-red-500 text-white p-5 flex justify-between items-center">
            <h2 className="text-2xl font-bold text-center flex-1">
              {step === "input" ? "üì¶ Th√™m chi ti·∫øt h√†ng h√≥a" : "üëÄ X√°c nh·∫≠n th√¥ng tin h√†ng h√≥a"}
            </h2>
            <button
              onClick={onClose}
              className="bg-white text-orange-600 hover:bg-orange-100 font-semibold px-4 py-2 rounded-lg"
            >
              ƒê√≥ng
            </button>
          </div>

          <div className="p-6">
            <div className="mb-4 p-3 bg-blue-50 rounded-lg">
              <p className="text-sm text-blue-700">
                <strong>M√£ ƒë∆°n h√†ng:</strong> #{order.orderCode}
              </p>
              <p className="text-sm text-blue-700 mt-1">
                <strong>L∆∞u √Ω:</strong> Sau khi x√°c nh·∫≠n, th√¥ng tin h√†ng h√≥a s·∫Ω kh√¥ng th·ªÉ s·ª≠a ƒë·ªïi ho·∫∑c x√≥a!
              </p>
            </div>

            {step === "input" ? (
              <form onSubmit={(e) => { e.preventDefault(); handlePreview(); }}>
                {/* DANH S√ÅCH H√ÄNG H√ìA - NH·∫¨P LI·ªÜU */}
                {items.map((item, index) => (
                  <div key={index} className="border rounded-lg p-5 space-y-4 bg-gray-50 mb-6 shadow-sm relative">
                    <div className="flex justify-between items-center border-b pb-2">
                      <h3 className="font-semibold text-lg text-gray-800">H√†ng h√≥a #{index + 1}</h3>
                      <button
                        type="button"
                        onClick={() => handleDeleteItem(index)}
                        className="text-red-500 hover:text-red-700 flex items-center gap-1"
                        title="X√≥a h√†ng h√≥a n√†y"
                      >
                        <X className="w-4 h-4" />
                        X√≥a
                      </button>
                    </div>

                    <div>
                      <label className="font-semibold">M√¥ t·∫£ h√†ng h√≥a *</label>
                      <input
                        type="text"
                        className="w-full border rounded-md p-2 mt-1"
                        placeholder="V√≠ d·ª•: T·ªß l·∫°nh, Gh·∫ø sofa..."
                        value={item.description}
                        onChange={(e) => handleChange(index, "description", e.target.value)}
                        required
                      />
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="font-semibold">S·ªë l∆∞·ª£ng</label>
                        <input
                          type="number"
                          min="1"
                          className="w-full border rounded-md p-2 mt-1"
                          value={item.quantity}
                          onChange={(e) => handleChange(index, "quantity", parseInt(e.target.value))}
                        />
                      </div>
                      <div>
                        <label className="font-semibold">Tr·ªçng l∆∞·ª£ng (kg)</label>
                        <input
                          type="number"
                          step="0.1"
                          min="0"
                          className="w-full border rounded-md p-2 mt-1"
                          value={item.weight}
                          onChange={(e) => handleChange(index, "weight", parseFloat(e.target.value))}
                        />
                      </div>
                    </div>

                    {/* Lo·∫°i h√†ng */}
                    <div>
                      <label className="font-semibold">Lo·∫°i h√†ng v·∫≠n chuy·ªÉn</label>
                      <div className="grid grid-cols-2 md:grid-cols-3 gap-2 mt-2">
                        {itemTypes.map((type) => (
                          <label
                            key={type}
                            className={`flex items-center gap-2 border rounded-md p-2 cursor-pointer text-sm transition-all ${item.type.includes(type)
                              ? "border-orange-500 bg-orange-50"
                              : "border-gray-300 hover:border-orange-300"
                              }`}
                          >
                            <input
                              type="checkbox"
                              checked={item.type.includes(type)}
                              onChange={() => toggleType(index, type)}
                            />
                            {type}
                          </label>
                        ))}
                      </div>
                    </div>

                    {/* H∆∞·ªõng d·∫´n v·∫≠n chuy·ªÉn */}
                    <div>
                      <label className="font-semibold">H∆∞·ªõng d·∫´n v·∫≠n chuy·ªÉn</label>
                      <div className="grid grid-cols-2 md:grid-cols-3 gap-2 mt-2">
                        {shippingOptions.map((option) => (
                          <label
                            key={option}
                            className={`flex items-center gap-2 border rounded-md p-2 cursor-pointer text-sm transition-all ${item.shipping_instructions.includes(option)
                              ? "border-orange-500 bg-orange-50"
                              : "border-gray-300 hover:border-orange-300"
                              }`}
                          >
                            <input
                              type="checkbox"
                              checked={item.shipping_instructions.includes(option)}
                              onChange={() => toggleShippingInstruction(index, option)}
                            />
                            {option}
                          </label>
                        ))}
                      </div>
                    </div>

                    {/* Ghi ch√∫ */}
                    <div>
                      <label className="font-semibold">Ghi ch√∫ cho t√†i x·∫ø</label>
                      <textarea
                        className="w-full border rounded-md p-2 mt-1"
                        placeholder="V√≠ d·ª•: Giao nh·∫π tay, tr√°nh nghi√™ng..."
                        value={item.driver_note}
                        onChange={(e) => handleChange(index, "driver_note", e.target.value)}
                        maxLength={200}
                      />
                      <p className="text-xs text-gray-400 text-right">
                        {200 - item.driver_note.length} k√Ω t·ª± c√≤n l·∫°i
                      </p>
                    </div>
                  </div>
                ))}

                <button
                  type="button"
                  onClick={handleAddItem}
                  className="mb-6 bg-blue-600 hover:bg-blue-700 text-white font-semibold px-4 py-2 rounded-lg flex items-center gap-2"
                >
                  ‚ûï Th√™m h√†ng h√≥a
                </button>

                {/* N√∫t h√†nh ƒë·ªông */}
                <div className="flex justify-end gap-3 mt-6">
                  <button
                    type="button"
                    onClick={onClose}
                    className="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                  >
                    H·ªßy
                  </button>
                  <button
                    type="submit"
                    className="px-6 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 flex items-center gap-2"
                  >
                    <Eye className="w-4 h-4" />
                    Xem tr∆∞·ªõc & X√°c nh·∫≠n
                  </button>
                </div>
              </form>
            ) : (
              /* B∆Ø·ªöC X√ÅC NH·∫¨N */
              <div className="space-y-6">
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <div className="flex items-center gap-2 text-yellow-800">
                    <Package className="w-5 h-5" />
                    <strong>Vui l√≤ng ki·ªÉm tra k·ªπ th√¥ng tin tr∆∞·ªõc khi x√°c nh·∫≠n!</strong>
                  </div>
                  <p className="text-sm text-yellow-700 mt-1">
                    Sau khi x√°c nh·∫≠n, th√¥ng tin h√†ng h√≥a s·∫Ω ƒë∆∞·ª£c g·ª≠i l√™n h·ªá th·ªëng v√† kh√¥ng th·ªÉ thay ƒë·ªïi.
                  </p>
                </div>

                {/* HI·ªÇN TH·ªä TO√ÄN B·ªò TH√îNG TIN ƒê√É NH·∫¨P */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold text-gray-800 border-b pb-2">
                    T·ªïng quan ƒë∆°n h√†ng
                  </h3>

                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="font-semibold">M√£ ƒë∆°n h√†ng:</span>
                      <span className="ml-2 text-blue-600">#{order.orderCode}</span>
                    </div>
                    <div>
                      <span className="font-semibold">T·ªïng s·ªë m·∫∑t h√†ng:</span>
                      <span className="ml-2 text-green-600">{items.length} m·∫∑t h√†ng</span>
                    </div>
                  </div>

                  <h3 className="text-lg font-semibold text-gray-800 border-b pb-2 mt-6">
                    Chi ti·∫øt t·ª´ng m·∫∑t h√†ng
                  </h3>

                  {items.map((item, index) => (
                    <div key={index} className="border rounded-lg p-4 bg-white shadow-sm">
                      <div className="flex justify-between items-start mb-3">
                        <h4 className="font-semibold text-gray-800 text-lg">H√†ng h√≥a #{index + 1}</h4>
                        <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm">
                          STT: {index + 1}
                        </span>
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                        <div>
                          <span className="font-semibold">M√¥ t·∫£:</span>
                          <p className="mt-1 p-2 bg-gray-50 rounded border">{item.description || "Ch∆∞a c√≥ m√¥ t·∫£"}</p>
                        </div>
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <span className="font-semibold">S·ªë l∆∞·ª£ng:</span>
                            <p className="mt-1 p-2 bg-gray-50 rounded border text-center">{item.quantity}</p>
                          </div>
                          <div>
                            <span className="font-semibold">Tr·ªçng l∆∞·ª£ng:</span>
                            <p className="mt-1 p-2 bg-gray-50 rounded border text-center">{item.weight} kg</p>
                          </div>
                        </div>
                      </div>

                      <div className="mt-3 grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                        <div>
                          <span className="font-semibold">Lo·∫°i h√†ng:</span>
                          <div className="mt-1 flex flex-wrap gap-1">
                            {item.type.length > 0 ? (
                              item.type.map((type, i) => (
                                <span key={i} className="bg-orange-100 text-orange-800 px-2 py-1 rounded text-xs">
                                  {type}
                                </span>
                              ))
                            ) : (
                              <span className="text-gray-500 text-xs">Kh√¥ng c√≥ lo·∫°i h√†ng ƒë∆∞·ª£c ch·ªçn</span>
                            )}
                          </div>
                        </div>
                        <div>
                          <span className="font-semibold">H∆∞·ªõng d·∫´n v·∫≠n chuy·ªÉn:</span>
                          <div className="mt-1 flex flex-wrap gap-1">
                            {item.shipping_instructions.length > 0 ? (
                              item.shipping_instructions.map((instruction, i) => (
                                <span key={i} className="bg-green-100 text-green-800 px-2 py-1 rounded text-xs">
                                  {instruction}
                                </span>
                              ))
                            ) : (
                              <span className="text-gray-500 text-xs">Kh√¥ng c√≥ h∆∞·ªõng d·∫´n ƒë·∫∑c bi·ªát</span>
                            )}
                          </div>
                        </div>
                      </div>

                      {item.driver_note && (
                        <div className="mt-3 text-sm">
                          <span className="font-semibold">Ghi ch√∫ cho t√†i x·∫ø:</span>
                          <p className="mt-1 p-2 bg-blue-50 rounded border text-gray-700">{item.driver_note}</p>
                        </div>
                      )}
                    </div>
                  ))}
                </div>

                {/* N√∫t h√†nh ƒë·ªông ·ªü b∆∞·ªõc x√°c nh·∫≠n */}
                <div className="flex justify-between gap-3 mt-8 pt-4 border-t">
                  <button
                    onClick={handleBackToEdit}
                    className="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 flex items-center gap-2"
                  >
                    <X className="w-4 h-4" />
                    Quay l·∫°i ch·ªânh s·ª≠a
                  </button>

                  <div className="flex gap-3">
                    <button
                      onClick={onClose}
                      className="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                    >
                      H·ªßy b·ªè
                    </button>
                    <button
                      onClick={handleSubmit}
                      disabled={loading}
                      className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 flex items-center gap-2"
                    >
                      <CheckSquare className="w-4 h-4" />
                      {loading ? "ƒêang x√°c nh·∫≠n..." : "X√°c nh·∫≠n & L∆∞u v√†o h·ªá th·ªëng"}
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* ‚úÖ Modal ƒë·ªïi g√≥i d·ªãch v·ª• */}
        {isEditPackageOpen && (
          <EditPackageModal
            orderId={order._id}
            onClose={() => setIsEditPackageOpen(false)}
            onUpdated={() => {
              setIsEditPackageOpen(false);
              onSuccess();
            }}
          />
        )}
      </div>
    );
  };

  export default OrderItemModal;