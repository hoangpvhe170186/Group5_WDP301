"use client";
import React, { useEffect, useState } from "react";
import axios from "axios";
import { X, RefreshCw, CheckCircle } from "lucide-react";

const EditPackageModal = ({ orderId, onClose, onUpdated }) => {
  const [packages, setPackages] = useState([]);
  const [selectedPackage, setSelectedPackage] = useState("");
  const [loading, setLoading] = useState(false);
  const [priceInfo, setPriceInfo] = useState(null);

  // ‚úÖ L·∫•y danh s√°ch g√≥i d·ªãch v·ª•
  useEffect(() => {
    const fetchPackages = async () => {
      try {
        const res = await axios.get("http://localhost:4000/api/price-packages");
        setPackages(res.data?.data || res.data || []);
      } catch (err) {
        console.error("‚ùå L·ªói khi t·∫£i danh s√°ch g√≥i:", err);
      }
    };
    fetchPackages();
  }, []);

  // ‚úÖ Khi ng∆∞·ªùi d√πng ch·ªçn g√≥i m·ªõi, t·ª± ƒë·ªông xem th·ª≠ gi√° m·ªõi
  const handlePreviewPrice = async () => {
    if (!selectedPackage) {
      alert("Vui l√≤ng ch·ªçn g√≥i c·∫ßn ƒë·ªïi!");
      return;
    }

    setLoading(true);
    try {
      // üîπ L·∫•y token v√† g·ª≠i k√®m khi g·ªçi API
      const token = localStorage.getItem("auth_token");
      const orderRes = await axios.get(`http://localhost:4000/api/orders/${orderId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      const order = orderRes.data?.order || orderRes.data; // ‚úÖ fix
      if (!order.pickup_address || !order.delivery_address) {
        alert("Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ c·ªßa ƒë∆°n h√†ng.");
        return;
      }

      // üîπ G·ªçi API t√≠nh gi√° m·ªõi
      const res = await axios.post("http://localhost:4000/api/pricing/estimate2", {
        pricepackage_id: selectedPackage,
        pickup_address: order.pickup_address,
        delivery_address: order.delivery_address,
      });

      console.log("üì¶ API Response:", res.data);

      if (res.data?.success) {
        setPriceInfo(res.data.data);
      } else {
        alert(res.data?.message || "Kh√¥ng t√≠nh ƒë∆∞·ª£c gi√° m·ªõi!");
      }
    } catch (err) {
      console.error("‚ùå L·ªói khi xem gi√° m·ªõi:", err.response?.data || err.message);
      alert("Kh√¥ng th·ªÉ xem tr∆∞·ªõc gi√° m·ªõi.");
    } finally {
      setLoading(false);
    }
  };
  // ‚úÖ X√°c nh·∫≠n ƒë·ªïi g√≥i
  const handleConfirmUpdate = async () => {
  if (!selectedPackage) {
    alert("Vui l√≤ng ch·ªçn g√≥i mu·ªën ƒë·ªïi!");
    return;
  }
  setLoading(true);
  try {
    const token = localStorage.getItem("auth_token");
    const res = await axios.patch(
      `http://localhost:4000/api/orders/${orderId}/update-package`, 
      { new_package_id: selectedPackage },
      { headers: { Authorization: `Bearer ${token}` } }
    );

    if (res.data?.success) {
      alert("‚úÖ ƒê√£ ƒë·ªïi g√≥i th√†nh c√¥ng!");
      onUpdated();
    } else {
      alert(res.data?.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t g√≥i.");
    }
  } catch (err) {
    console.error("‚ùå L·ªói khi ƒë·ªïi g√≥i:", err.response?.data || err.message);
    alert("‚ö† " + (err.response?.data?.message || err.message));
  } finally {
    setLoading(false);
  }
};

  if (!orderId) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl w-full max-w-2xl shadow-lg overflow-hidden">
        {/* Header */}
        <div className="bg-gradient-to-r from-orange-500 to-red-500 text-white p-4 flex justify-between items-center">
          <h2 className="text-xl font-semibold">üîß ƒê·ªïi g√≥i d·ªãch v·ª•</h2>
          <button
            onClick={onClose}
            className="bg-white text-orange-600 hover:bg-orange-100 font-semibold px-3 py-1 rounded-lg"
          >
            <X className="w-4 h-4" />
          </button>
        </div>

        {/* Body */}
        <div className="p-6 space-y-5">
          <div>
            <label className="block text-gray-700 font-semibold mb-2">
              Ch·ªçn g√≥i d·ªãch v·ª• m·ªõi
            </label>
            <select
              className="w-full border rounded-lg p-2 text-gray-700"
              value={selectedPackage}
              onChange={(e) => setSelectedPackage(e.target.value)}
            >
              <option value="">-- Ch·ªçn g√≥i --</option>
              {packages.map((pkg) => (
                <option key={pkg._id} value={pkg._id}>
                  {pkg.name} ({pkg.capacity}kg)
                </option>
              ))}
            </select>
          </div>

          <div className="flex justify-end gap-3">
            <button
              onClick={handlePreviewPrice}
              disabled={loading}
              className="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50"
            >
              <RefreshCw className="w-4 h-4" />
              {loading ? "ƒêang t√≠nh..." : "Xem gi√° m·ªõi"}
            </button>
          </div>

          {/* ‚úÖ Th√¥ng tin gi√° m·ªõi */}
          {priceInfo && (
            <div className="border-t pt-4 space-y-2">
              <p className="text-gray-700">
                <strong>Gi√° m·ªõi d·ª± ki·∫øn:</strong>{" "}
                <span className="text-green-600 font-semibold">
                  {priceInfo.totalFee?.toLocaleString()}‚Ç´
                </span>
              </p>
              <p className="text-gray-700">
                <strong>Kho·∫£ng c√°ch:</strong>{" "}
                <span className="text-blue-600">{priceInfo.distance?.text}</span>
              </p>
              <p className="text-gray-700">
                <strong>Th·ªùi gian ∆∞·ªõc t√≠nh:</strong>{" "}
                <span className="text-blue-600">{priceInfo.duration?.text}</span>
              </p>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="bg-gray-50 p-4 flex justify-end gap-3 border-t">
          <button
            onClick={onClose}
            className="px-5 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100"
          >
            H·ªßy
          </button>
          <button
            onClick={handleConfirmUpdate}
            disabled={loading || !selectedPackage}
            className="flex items-center gap-2 bg-green-600 text-white px-5 py-2 rounded-lg hover:bg-green-700 disabled:opacity-50"
          >
            <CheckCircle className="w-4 h-4" />
            {loading ? "ƒêang c·∫≠p nh·∫≠t..." : "X√°c nh·∫≠n ƒë·ªïi g√≥i"}
          </button>
        </div>
      </div>
    </div>
  );
};

export default EditPackageModal;
